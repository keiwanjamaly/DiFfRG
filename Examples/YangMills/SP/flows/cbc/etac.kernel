template <typename REG> class etac_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
  static __forceinline__ __host__ __device__ auto kernel(const double q, const double cos1, const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc, const T4 &ZA4,
                                                         const T5 &etac, const T6 &dtZA, const T7 &ZA, const T8 m2A)
  {
    // optimization definitions
    const double DiFfRGREPL1 = RB(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL2 = RB(powr<2>(k), 2. * cos1 * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL3 = ZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL4 = ZA(q);

    // flow
    return 3. * (-1. + powr<2>(cos1)) * powr<-2>(DiFfRGREPL1 * DiFfRGREPL3 + m2A + DiFfRGREPL4 * powr<2>(q)) *
               powr<-1>(-2. * cos1 * p * q + powr<2>(p) + powr<2>(q) + RB(powr<2>(k), -2. * cos1 * p * q + powr<2>(p) + powr<2>(q))) *
               (DiFfRGREPL1 * dtZA(pow(1. + powr<6>(k), 0.16666666666666666)) + DiFfRGREPL3 * RBdot(powr<2>(k), powr<2>(q))) *
               ZAcbc(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                     (sqrt((-2. * cos1 * q * powr<3>(p) + powr<4>(p) + (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) + powr<4>(q)) *
                           powr<-2>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                     atan2(-1.7320508075688772 * q * (-2. * cos1 * p + q) * powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)),
                           -1. + 3. * p * (p - 1. * cos1 * q) * powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)))) *
               ZAcbc(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                     (sqrt((-2. * cos1 * q * powr<3>(p) + powr<4>(p) + (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) + powr<4>(q)) *
                           powr<-2>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                     atan2(1.7320508075688772 * q * (-2. * cos1 * p + q) * powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)),
                           -1. + 3. * p * (p - 1. * cos1 * q) * powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)))) +
           3. * (-1. + powr<2>(cos1)) * powr<-2>(DiFfRGREPL2 + 2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) * powr<-1>(DiFfRGREPL1 * DiFfRGREPL3 + m2A + DiFfRGREPL4 * powr<2>(q)) *
               (-1. * DiFfRGREPL2 * etac((sqrt(2. * cos1 * p * q + powr<2>(p) + powr<2>(q)))) + RBdot(powr<2>(k), 2. * cos1 * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc(0.816496580927726 * (sqrt(cos1 * p * q + powr<2>(p) + powr<2>(q))),
                     (sqrt(1. + 3. * (-1. + powr<2>(cos1)) * powr<2>(p) * powr<2>(q) * powr<-2>(cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                     atan2(-1.7320508075688772 * q * (2. * cos1 * p + q) * powr<-1>(cos1 * p * q + powr<2>(p) + powr<2>(q)),
                           -1. + 3. * p * (p + cos1 * q) * powr<-1>(cos1 * p * q + powr<2>(p) + powr<2>(q)))) *
               ZAcbc(0.816496580927726 * (sqrt(cos1 * p * q + powr<2>(p) + powr<2>(q))),
                     (sqrt(1. + 3. * (-1. + powr<2>(cos1)) * powr<2>(p) * powr<2>(q) * powr<-2>(cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                     atan2(1.7320508075688772 * q * (2. * cos1 * p + q) * powr<-1>(cos1 * p * q + powr<2>(p) + powr<2>(q)),
                           -1. + 3. * p * (p + cos1 * q) * powr<-1>(cos1 * p * q + powr<2>(p) + powr<2>(q))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc, const T4 &ZA4, const T5 &etac, const T6 &dtZA, const T7 &ZA,
                                                           const T8 m2A)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};