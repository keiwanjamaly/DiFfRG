template <typename REG> class ZA3_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  static __forceinline__ __host__ __device__ auto kernel(const double q, const double cos1, const double cos2, const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc,
                                                         const T4 &ZA4, const T5 &dtZc, const T6 &Zc, const T7 &dtZA, const T8 &ZA, const T9 m2A)
  {
    const double cosp1q = cos1;
    const double cosp2q = 0.5 * (-1. * cos1 + cos2 * (sqrt(3. - 3. * powr<2>(cos1))));
    const double cosp3q = 0.5 * (-1. * cos1 - 1. * cos2 * (sqrt(3. - 3. * powr<2>(cos1))));
    // optimization definitions
    const double DiFfRGREPL1 = dtZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL2 = dtZc(k);
    const double DiFfRGREPL3 = RB(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL4 = RB(powr<2>(k), -2. * cosp1q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL5 = RB(powr<2>(k), 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL6 = RB(powr<2>(k), 2. * cosp1q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL7 = RB(powr<2>(k), 2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL8 = RB(powr<2>(k), -2. * cosp2q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL9 = RB(powr<2>(k), -2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL10 = RBdot(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL11 = ZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL12 = ZA(1.02 * pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL13 = ZA(q);
    const double DiFfRGREPL14 = ZA((sqrt(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL15 = ZA((sqrt(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL16 = ZA((sqrt(2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL17 = ZA3(0.816496580927726 * (sqrt(cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL18 = ZA3(0.816496580927726 * (sqrt(cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL19 = ZA3(0.816496580927726 * (sqrt((cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL20 = ZAcbc(0.816496580927726 * (sqrt(cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL21 = ZAcbc(0.816496580927726 * (sqrt(-1. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL22 = ZAcbc(0.816496580927726 * (sqrt(-1. * cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL23 = ZAcbc(0.816496580927726 * (sqrt(cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL24 = ZAcbc(0.816496580927726 * (sqrt(-1. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL25 = ZAcbc(0.816496580927726 * (sqrt((cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL26 = Zc(k);
    const double DiFfRGREPL27 = Zc(1.02 * k);
    const double DiFfRGREPL28 = Zc(q);
    const double DiFfRGREPL29 = Zc((sqrt(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL30 = Zc((sqrt(-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL31 = Zc((sqrt(-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL32 = Zc((sqrt(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL33 = Zc((sqrt(-2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL34 = Zc((sqrt(2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));

    // flow
    return 0.030303030303030304 * DiFfRGREPL18 * DiFfRGREPL19 *
               ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
               powr<-1>(p) *
               (q * (-231. * cosp2q + 1386. * cosp2q * powr<2>(cosp1q) + 924. * powr<3>(cosp1q) + cosp1q * (-462. + 462. * powr<2>(cosp2q))) * powr<6>(p) +
                (-99. + 198. * cosp1q * cosp2q + 198. * powr<2>(cosp1q)) * powr<7>(p) +
                (-378. + 2508. * cosp2q * powr<3>(cosp1q) + 1254. * powr<4>(cosp1q) - 72. * powr<2>(cosp2q) + powr<2>(cosp1q) * (153. + 1302. * powr<2>(cosp2q)) +
                 cosp1q * (153. * cosp2q + 48. * powr<3>(cosp2q))) *
                    powr<5>(p) * powr<2>(q) +
                (-482. * cosp2q + 1120. * cosp2q * powr<4>(cosp1q) + 448. * powr<5>(cosp1q) + powr<3>(cosp1q) * (1920. + 544. * powr<2>(cosp2q)) +
                 powr<2>(cosp1q) * (2880. * cosp2q - 304. * powr<3>(cosp2q)) - 128. * powr<3>(cosp2q) + cosp1q * (-964. + 704. * powr<2>(cosp2q) - 176. * powr<4>(cosp2q))) *
                    powr<4>(p) * powr<3>(q) +
                (-372. + 96. * cosp2q * powr<5>(cosp1q) + 32. * powr<6>(cosp1q) + 56. * powr<2>(cosp2q) + powr<4>(cosp1q) * (1244. + 40. * powr<2>(cosp2q)) +
                 powr<3>(cosp1q) * (2488. * cosp2q - 80. * powr<3>(cosp2q)) + powr<2>(cosp1q) * (326. + 436. * powr<2>(cosp2q) - 72. * powr<4>(cosp2q)) - 240. * powr<4>(cosp2q) +
                 cosp1q * (326. * cosp2q - 808. * powr<3>(cosp2q) - 16. * powr<5>(cosp2q))) *
                    powr<3>(p) * powr<4>(q) +
                (-144. * cosp2q + 520. * cosp2q * powr<4>(cosp1q) + 208. * powr<5>(cosp1q) + powr<3>(cosp1q) * (776. + 16. * powr<2>(cosp2q)) +
                 powr<2>(cosp1q) * (1164. * cosp2q - 496. * powr<3>(cosp2q)) - 200. * powr<3>(cosp2q) + cosp1q * (-288. - 12. * powr<2>(cosp2q) - 232. * powr<4>(cosp2q)) -
                 16. * powr<5>(cosp2q)) *
                    powr<2>(p) * powr<5>(q) +
                p *
                    (-72. + 384. * cosp2q * powr<3>(cosp1q) + 192. * powr<4>(cosp1q) + powr<2>(cosp1q) * (132. - 144. * powr<2>(cosp2q)) + 24. * powr<2>(cosp2q) +
                     cosp1q * (132. * cosp2q - 336. * powr<3>(cosp2q)) - 96. * powr<4>(cosp2q)) *
                    powr<6>(q) +
                (72. * cosp2q * powr<2>(cosp1q) + 48. * powr<3>(cosp1q) - 72. * cosp1q * powr<2>(cosp2q) - 48. * powr<3>(cosp2q)) * powr<7>(q)) *
               powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-1>(2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) *
               powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL6 + DiFfRGREPL15 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL7 + DiFfRGREPL16 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZA3((sqrt(0.6666666666666666 * (2. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) +
           0.030303030303030304 * DiFfRGREPL17 *
               ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
               powr<-1>(p) *
               (q * (231. * cosp2q - 462. * cosp2q * powr<2>(cosp1q) + cosp1q * (-231. + 462. * powr<2>(cosp2q))) * powr<6>(p) + (99. + 198. * cosp1q * cosp2q) * powr<7>(p) +
                (378. + 48. * cosp2q * powr<3>(cosp1q) + powr<2>(cosp1q) * (72. - 1158. * powr<2>(cosp2q)) + 72. * powr<2>(cosp2q) +
                 cosp1q * (297. * cosp2q + 48. * powr<3>(cosp2q))) *
                    powr<5>(p) * powr<2>(q) +
                (482. * cosp2q + 176. * cosp2q * powr<4>(cosp1q) + powr<3>(cosp1q) * (-128. + 400. * powr<2>(cosp2q)) +
                 powr<2>(cosp1q) * (-1088. * cosp2q - 400. * powr<3>(cosp2q)) + 128. * powr<3>(cosp2q) + cosp1q * (-482. + 1088. * powr<2>(cosp2q) - 176. * powr<4>(cosp2q))) *
                    powr<4>(p) * powr<3>(q) +
                (372. - 16. * cosp2q * powr<5>(cosp1q) + powr<4>(cosp1q) * (240. - 8. * powr<2>(cosp2q)) - 56. * powr<2>(cosp2q) +
                 powr<3>(cosp1q) * (152. * cosp2q + 48. * powr<3>(cosp2q)) + powr<2>(cosp1q) * (-56. - 1420. * powr<2>(cosp2q) - 8. * powr<4>(cosp2q)) + 240. * powr<4>(cosp2q) +
                 cosp1q * (214. * cosp2q + 152. * powr<3>(cosp2q) - 16. * powr<5>(cosp2q))) *
                    powr<3>(p) * powr<4>(q) +
                (144. * cosp2q + 152. * cosp2q * powr<4>(cosp1q) - 16. * powr<5>(cosp1q) + powr<3>(cosp1q) * (-200. + 272. * powr<2>(cosp2q)) +
                 powr<2>(cosp1q) * (-588. * cosp2q - 272. * powr<3>(cosp2q)) + 200. * powr<3>(cosp2q) + cosp1q * (-144. + 588. * powr<2>(cosp2q) - 152. * powr<4>(cosp2q)) +
                 16. * powr<5>(cosp2q)) *
                    powr<2>(p) * powr<5>(q) +
                p *
                    (72. + 48. * cosp2q * powr<3>(cosp1q) + 96. * powr<4>(cosp1q) + powr<2>(cosp1q) * (-24. - 288. * powr<2>(cosp2q)) - 24. * powr<2>(cosp2q) +
                     cosp1q * (84. * cosp2q + 48. * powr<3>(cosp2q)) + 96. * powr<4>(cosp2q)) *
                    powr<6>(q) +
                (-72. * cosp2q * powr<2>(cosp1q) - 48. * powr<3>(cosp1q) + 72. * cosp1q * powr<2>(cosp2q) + 48. * powr<3>(cosp2q)) * powr<7>(q)) *
               powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp1q * p * q - 1. * powr<2>(p) - 1. * powr<2>(q)) * powr<-1>(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) *
               powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL5 + DiFfRGREPL14 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL4 + (-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * ZA((sqrt(-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))))) *
               ZA3((sqrt(0.6666666666666666 * (-1. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) *
               ZA3(0.816496580927726 * (sqrt(-1. * cosp1q * p * q + powr<2>(p) + powr<2>(q)))) -
           0.09090909090909091 * DiFfRGREPL18 *
               ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
               (cosp1q * p * q * (-54. - 4. * cosp1q * cosp2q + 53. * powr<2>(cosp1q) - 4. * powr<2>(cosp2q)) + (-33. + 33. * powr<2>(cosp1q)) * powr<2>(p) +
                (-54. - 4. * cosp1q * cosp2q + 53. * powr<2>(cosp1q) - 4. * powr<2>(cosp2q)) * powr<2>(q)) *
               powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL6 + DiFfRGREPL15 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               ZA4(0.5 * (sqrt(2. * cosp1q * p * q + 3. * powr<2>(p) + 2. * powr<2>(q)))) +
           DiFfRGREPL17 *
               (0.030303030303030304 * DiFfRGREPL19 *
                    ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                     DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
                    powr<-1>(p) *
                    (q * (-462. * cosp2q + 462. * cosp2q * powr<2>(cosp1q) + cosp1q * (-231. + 1386. * powr<2>(cosp2q)) + 924. * powr<3>(cosp2q)) * powr<6>(p) +
                     (-99. + 198. * cosp1q * cosp2q + 198. * powr<2>(cosp2q)) * powr<7>(p) +
                     (-378. + 48. * cosp2q * powr<3>(cosp1q) + 153. * powr<2>(cosp2q) + powr<2>(cosp1q) * (-72. + 1302. * powr<2>(cosp2q)) +
                      cosp1q * (153. * cosp2q + 2508. * powr<3>(cosp2q)) + 1254. * powr<4>(cosp2q)) *
                         powr<5>(p) * powr<2>(q) +
                     (-964. * cosp2q - 176. * cosp2q * powr<4>(cosp1q) + powr<3>(cosp1q) * (-128. - 304. * powr<2>(cosp2q)) + 1920. * powr<3>(cosp2q) +
                      powr<2>(cosp1q) * (704. * cosp2q + 544. * powr<3>(cosp2q)) + cosp1q * (-482. + 2880. * powr<2>(cosp2q) + 1120. * powr<4>(cosp2q)) + 448. * powr<5>(cosp2q)) *
                         powr<4>(p) * powr<3>(q) +
                     (-372. - 16. * cosp2q * powr<5>(cosp1q) + powr<4>(cosp1q) * (-240. - 72. * powr<2>(cosp2q)) + 326. * powr<2>(cosp2q) +
                      powr<3>(cosp1q) * (-808. * cosp2q - 80. * powr<3>(cosp2q)) + 1244. * powr<4>(cosp2q) +
                      powr<2>(cosp1q) * (56. + 436. * powr<2>(cosp2q) + 40. * powr<4>(cosp2q)) + cosp1q * (326. * cosp2q + 2488. * powr<3>(cosp2q) + 96. * powr<5>(cosp2q)) +
                      32. * powr<6>(cosp2q)) *
                         powr<3>(p) * powr<4>(q) +
                     (-288. * cosp2q - 232. * cosp2q * powr<4>(cosp1q) - 16. * powr<5>(cosp1q) + powr<3>(cosp1q) * (-200. - 496. * powr<2>(cosp2q)) + 776. * powr<3>(cosp2q) +
                      powr<2>(cosp1q) * (-12. * cosp2q + 16. * powr<3>(cosp2q)) + cosp1q * (-144. + 1164. * powr<2>(cosp2q) + 520. * powr<4>(cosp2q)) + 208. * powr<5>(cosp2q)) *
                         powr<2>(p) * powr<5>(q) +
                     p * (-72. - 336. * cosp2q * powr<3>(cosp1q) - 96. * powr<4>(cosp1q) + powr<2>(cosp1q) * (24. - 144. * powr<2>(cosp2q)) + 132. * powr<2>(cosp2q) + cosp1q * (132. * cosp2q + 384. * powr<3>(cosp2q)) + 192. * powr<4>(cosp2q)) *
                         powr<6>(q) +
                     (-72. * cosp2q * powr<2>(cosp1q) - 48. * powr<3>(cosp1q) + 72. * cosp1q * powr<2>(cosp2q) + 48. * powr<3>(cosp2q)) * powr<7>(q)) *
                    powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) *
                    powr<-1>(2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) * powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL11 * DiFfRGREPL5 + DiFfRGREPL14 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
                    powr<-1>(DiFfRGREPL11 * DiFfRGREPL7 + DiFfRGREPL16 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
                    ZA3((sqrt(0.6666666666666666 * (cosp1q + 2. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
                0.09090909090909091 *
                    ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                     DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
                    (cosp2q * p * q * (-54. - 4. * cosp1q * cosp2q - 4. * powr<2>(cosp1q) + 53. * powr<2>(cosp2q)) + (-33. + 33. * powr<2>(cosp2q)) * powr<2>(p) +
                     (-54. - 4. * cosp1q * cosp2q - 4. * powr<2>(cosp1q) + 53. * powr<2>(cosp2q)) * powr<2>(q)) *
                    powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) * powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL11 * DiFfRGREPL5 + DiFfRGREPL14 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
                    ZA4(0.5 * (sqrt(2. * cosp2q * p * q + 3. * powr<2>(p) + 2. * powr<2>(q))))) -
           0.09090909090909091 * DiFfRGREPL19 *
               ((-50. * DiFfRGREPL11 + 50. * DiFfRGREPL12) * DiFfRGREPL3 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL11 * (1. + powr<6>(k)) +
                DiFfRGREPL1 * DiFfRGREPL3 * (1. + 1. * powr<6>(k))) *
               (p * q * (-54. * cosp2q + 163. * cosp2q * powr<2>(cosp1q) + 53. * powr<3>(cosp1q) + cosp1q * (-54. + 163. * powr<2>(cosp2q)) + 53. * powr<3>(cosp2q)) +
                (-33. + 66. * cosp1q * cosp2q + 33. * powr<2>(cosp1q) + 33. * powr<2>(cosp2q)) * powr<2>(p) +
                (-54. + 110. * cosp1q * cosp2q + 53. * powr<2>(cosp1q) + 53. * powr<2>(cosp2q)) * powr<2>(q)) *
               powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) *
               powr<-2>(DiFfRGREPL11 * DiFfRGREPL3 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL11 * DiFfRGREPL7 + DiFfRGREPL16 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZA4(0.5 * (sqrt(2. * (cosp1q + cosp2q) * p * q + 3. * powr<2>(p) + 2. * powr<2>(q)))) -
           0.030303030303030304 * DiFfRGREPL20 * DiFfRGREPL21 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-3. - 3.5 * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 1. * powr<2>(cosp2q)) +
                q * (-3. * cosp2q * powr<2>(cosp1q) - 2. * powr<3>(cosp1q) + 3. * cosp1q * powr<2>(cosp2q) + 2. * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL6 + DiFfRGREPL29 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL8 + DiFfRGREPL30 * (-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(0.6666666666666666 * (cosp1q - 1. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           0.030303030303030304 * DiFfRGREPL22 * DiFfRGREPL23 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-3. - 3.5 * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 1. * powr<2>(cosp2q)) +
                q * (3. * cosp2q * powr<2>(cosp1q) + 2. * powr<3>(cosp1q) - 3. * cosp1q * powr<2>(cosp2q) - 2. * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL4 + DiFfRGREPL31 * (-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL5 + DiFfRGREPL32 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(0.6666666666666666 * (-1. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           0.16666666666666669 * DiFfRGREPL22 * DiFfRGREPL24 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-0.5454545454545454 + 1. * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 0.18181818181818182 * powr<2>(cosp2q)) +
                q * (-0.5454545454545454 * cosp2q * powr<2>(cosp1q) - 0.36363636363636365 * powr<3>(cosp1q) + 0.5454545454545454 * cosp1q * powr<2>(cosp2q) +
                     0.36363636363636365 * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL4 + DiFfRGREPL31 * (-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL9 + DiFfRGREPL33 * (-2. * cosp1q * p * q - 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(-0.6666666666666666 * (2. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           0.16666666666666669 * DiFfRGREPL20 * DiFfRGREPL25 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-0.5454545454545454 + 1. * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 0.18181818181818182 * powr<2>(cosp2q)) +
                q * (0.5454545454545454 * cosp2q * powr<2>(cosp1q) + 0.36363636363636365 * powr<3>(cosp1q) - 0.5454545454545454 * cosp1q * powr<2>(cosp2q) -
                     0.36363636363636365 * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL6 + DiFfRGREPL29 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL7 + DiFfRGREPL34 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(0.6666666666666666 * (2. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           0.030303030303030304 * DiFfRGREPL21 * DiFfRGREPL24 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-3. + 5.5 * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 5.5 * powr<2>(cosp2q)) +
                q * (3. * cosp2q * powr<2>(cosp1q) + 2. * powr<3>(cosp1q) - 3. * cosp1q * powr<2>(cosp2q) - 2. * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL8 + DiFfRGREPL30 * (-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL9 + DiFfRGREPL33 * (-2. * cosp1q * p * q - 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(-0.6666666666666666 * (cosp1q + 2. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           0.030303030303030304 * DiFfRGREPL23 * DiFfRGREPL25 *
               (DiFfRGREPL10 * DiFfRGREPL26 + DiFfRGREPL2 * DiFfRGREPL3 + (-50. * DiFfRGREPL26 + 50. * DiFfRGREPL27) * DiFfRGREPL3) *
               (p * (-3. + 5.5 * cosp1q * cosp2q + 1. * powr<2>(cosp1q) + 5.5 * powr<2>(cosp2q)) +
                q * (-3. * cosp2q * powr<2>(cosp1q) - 2. * powr<3>(cosp1q) + 3. * cosp1q * powr<2>(cosp2q) + 2. * powr<3>(cosp2q))) *
               powr<-1>(p) * powr<2>(q) * powr<-2>(DiFfRGREPL26 * DiFfRGREPL3 + DiFfRGREPL28 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL5 + DiFfRGREPL32 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL26 * DiFfRGREPL7 + DiFfRGREPL34 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(0.6666666666666666 * (cosp1q + 2. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc, const T4 &ZA4, const T5 &dtZc, const T6 &Zc, const T7 &dtZA,
                                                           const T8 &ZA, const T9 m2A)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};