template <typename REG> class ZAcbc_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  static __forceinline__ __host__ __device__ auto kernel(const double q, const double cos1, const double cos2, const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc,
                                                         const T4 &ZA4, const T5 &dtZc, const T6 &Zc, const T7 &dtZA, const T8 &ZA, const T9 m2A)
  {
    const double cosp1q = cos1;
    const double cosp2q = 0.5 * (-1. * cos1 + cos2 * (sqrt(3. - 3. * powr<2>(cos1))));
    const double cosp3q = 0.5 * (-1. * cos1 - 1. * cos2 * (sqrt(3. - 3. * powr<2>(cos1))));
    // optimization definitions
    const double DiFfRGREPL1 = dtZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL2 = dtZc(k);
    const double DiFfRGREPL3 = RB(powr<2>(k), 2. * cosp1q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL4 = RB(powr<2>(k), -2. * cosp2q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL5 = RB(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL6 = RB(powr<2>(k), 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL7 = RB(powr<2>(k), 2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL8 = RBdot(powr<2>(k), -2. * cosp2q * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL9 = RBdot(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL10 = ZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL11 = ZA((sqrt(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL12 = ZA(1.02 * pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL13 = ZA(q);
    const double DiFfRGREPL14 = ZAcbc((sqrt(0.6666666666666666 * (cosp1q - 1. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q))));
    const double DiFfRGREPL15 = ZAcbc(0.816496580927726 * (sqrt(cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL16 = ZAcbc(0.816496580927726 * (sqrt(-1. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL17 = ZAcbc(0.816496580927726 * (sqrt((cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL18 = Zc(k);
    const double DiFfRGREPL19 = Zc(1.02 * k);
    const double DiFfRGREPL20 = Zc((sqrt(-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL21 = Zc((sqrt(2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))));
    const double DiFfRGREPL22 = Zc((sqrt(2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))));

    // flow
    return -0.5 * DiFfRGREPL15 * p *
               ((-50. * DiFfRGREPL10 + 50. * DiFfRGREPL12) * DiFfRGREPL5 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL9 * (1. + powr<6>(k)) +
                DiFfRGREPL1 * DiFfRGREPL5 * (1. + 1. * powr<6>(k))) *
               (q * (2. * cosp2q - 10. * cosp2q * powr<2>(cosp1q) + cosp1q * (-5. + 4. * powr<2>(cosp2q))) * powr<2>(p) + (3. + 6. * cosp1q * cosp2q) * powr<3>(p) +
                p * (6. - 4. * cosp2q * powr<3>(cosp1q) + powr<2>(cosp1q) * (-2. - 12. * powr<2>(cosp2q)) - 4. * powr<2>(cosp2q) + cosp1q * (6. * cosp2q - 8. * powr<3>(cosp2q))) *
                    powr<2>(q) +
                (-4. * cosp2q + 4. * cosp2q * powr<2>(cosp1q) + cosp1q * (-2. + 12. * powr<2>(cosp2q)) + 8. * powr<3>(cosp2q)) * powr<3>(q)) *
               powr<-1>(1. + powr<6>(k)) * powr<-1>(-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-2>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL6 + DiFfRGREPL21 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL10 * RB(powr<2>(k), -2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) +
                        (-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * ZA((sqrt(-2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))))) *
               ZA3(0.816496580927726 * (sqrt(-1. * cosp1q * p * q + powr<2>(p) + powr<2>(q)))) *
               ZAcbc((sqrt(0.6666666666666666 * (-1. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) +
           ZA3(0.816496580927726 * (sqrt(cosp1q * p * q + powr<2>(p) + powr<2>(q)))) *
               (-3. * DiFfRGREPL14 * DiFfRGREPL16 * ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19) * DiFfRGREPL4 + DiFfRGREPL2 * DiFfRGREPL4 + DiFfRGREPL18 * DiFfRGREPL8) * p *
                    (q * (-0.3333333333333333 * cosp2q + 1.6666666666666667 * cosp2q * powr<2>(cosp1q) + cosp1q * (0.8333333333333334 - 0.6666666666666666 * powr<2>(cosp2q))) *
                         powr<2>(p) +
                     (0.5 + 1. * cosp1q * cosp2q) * powr<3>(p) +
                     p *
                         (1. - 0.6666666666666666 * cosp2q * powr<3>(cosp1q) + powr<2>(cosp1q) * (-0.3333333333333333 - 2. * powr<2>(cosp2q)) -
                          0.6666666666666666 * powr<2>(cosp2q) + cosp1q * (1. * cosp2q - 1.3333333333333333 * powr<3>(cosp2q))) *
                         powr<2>(q) +
                     (0.6666666666666666 * cosp2q - 0.6666666666666666 * cosp2q * powr<2>(cosp1q) + cosp1q * (0.3333333333333333 - 2. * powr<2>(cosp2q)) -
                      1.3333333333333333 * powr<3>(cosp2q)) *
                         powr<3>(q)) *
                    powr<-1>(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-1>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL13 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
                    powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 + DiFfRGREPL20 * (-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) +
                0.5 * DiFfRGREPL17 * p *
                    ((-50. * DiFfRGREPL10 + 50. * DiFfRGREPL12) * DiFfRGREPL5 * powr<6>(k) + DiFfRGREPL10 * DiFfRGREPL9 * (1. + powr<6>(k)) +
                     DiFfRGREPL1 * DiFfRGREPL5 * (1. + 1. * powr<6>(k))) *
                    (q * (-2. * cosp2q + 18. * cosp2q * powr<2>(cosp1q) + 14. * powr<3>(cosp1q) + cosp1q * (-7. + 4. * powr<2>(cosp2q))) * powr<2>(p) +
                     (-3. + 6. * cosp1q * cosp2q + 6. * powr<2>(cosp1q)) * powr<3>(p) +
                     p *
                         (-6. - 4. * cosp2q * powr<3>(cosp1q) + powr<2>(cosp1q) * (12. - 12. * powr<2>(cosp2q)) + 4. * powr<2>(cosp2q) +
                          cosp1q * (14. * cosp2q - 8. * powr<3>(cosp2q))) *
                         powr<2>(q) +
                     (4. * cosp2q - 4. * cosp2q * powr<2>(cosp1q) + cosp1q * (2. - 12. * powr<2>(cosp2q)) - 8. * powr<3>(cosp2q)) * powr<3>(q)) *
                    powr<-1>(1. + powr<6>(k)) * powr<-1>(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-2>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL13 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
                    powr<-1>(DiFfRGREPL18 * DiFfRGREPL7 + DiFfRGREPL22 * (2. * cosp1q * p * q + 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
                    ZAcbc((sqrt(0.6666666666666666 * (2. * cosp1q + cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q))))) +
           0.25 * DiFfRGREPL15 * DiFfRGREPL17 * p * (3. * p + 2. * (cosp1q + 2. * cosp2q) * q) * (-1. + 2. * cosp1q * cosp2q + 2. * powr<2>(cosp2q)) *
               (DiFfRGREPL10 * DiFfRGREPL9 + DiFfRGREPL5 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL10 + DiFfRGREPL12) * powr<6>(k) * powr<-1>(1. + powr<6>(k)))) *
               powr<-2>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL6 + DiFfRGREPL21 * (2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL7 + DiFfRGREPL22 * (2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))) *
               ZAcbc((sqrt(0.6666666666666666 * (cosp1q + 2. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) -
           1. * DiFfRGREPL16 * ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19) * DiFfRGREPL4 + DiFfRGREPL2 * DiFfRGREPL4 + DiFfRGREPL18 * DiFfRGREPL8) * p *
               (-1.5 * p + 1. * cosp1q * q + 2. * cosp2q * q) * (-0.5 + 1. * cosp1q * cosp2q + 1. * powr<2>(cosp2q)) *
               powr<-1>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL13 * powr<2>(q)) *
               powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 + DiFfRGREPL20 * (-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 * RB(powr<2>(k), -2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q)) +
                        (-2. * cosp1q * p * q - 2. * cosp2q * p * q + powr<2>(p) + powr<2>(q)) * Zc((sqrt(-2. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q))))) *
               ZAcbc((sqrt(-0.6666666666666666 * (cosp1q + 2. * cosp2q) * p * q + powr<2>(p) + 0.6666666666666666 * powr<2>(q)))) *
               ZAcbc(0.816496580927726 * (sqrt(-1. * (cosp1q + cosp2q) * p * q + powr<2>(p) + powr<2>(q)))) -
           1.125 * DiFfRGREPL14 * ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19) * DiFfRGREPL4 + DiFfRGREPL2 * DiFfRGREPL4 + DiFfRGREPL18 * DiFfRGREPL8) * p *
               ((1.3333333333333333 * cosp1q * q - 1.3333333333333333 * cosp2q * q) * powr<2>(p) + 1. * powr<3>(p) +
                p * (0.6666666666666666 - 4. * cosp1q * cosp2q - 1.3333333333333333 * powr<2>(cosp1q) - 1.3333333333333333 * powr<2>(cosp2q)) * powr<2>(q) +
                (-0.8888888888888888 * cosp2q + 0.8888888888888888 * cosp2q * powr<2>(cosp1q) + cosp1q * (-0.4444444444444444 + 2.6666666666666665 * powr<2>(cosp2q)) +
                 1.7777777777777777 * powr<3>(cosp2q)) *
                    powr<3>(q)) *
               powr<-1>(2. * cosp1q * p * q + powr<2>(p) + powr<2>(q)) * powr<-1>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * (2. * cosp1q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 + DiFfRGREPL20 * (-2. * cosp2q * p * q + powr<2>(p) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 * RB(powr<2>(k), 2. * (cosp1q - 1. * cosp2q) * p * q + 3. * powr<2>(p) + powr<2>(q)) +
                        (2. * cosp1q * p * q - 2. * cosp2q * p * q + 3. * powr<2>(p) + powr<2>(q)) *
                            Zc((sqrt(2. * (cosp1q - 1. * cosp2q) * p * q + 3. * powr<2>(p) + powr<2>(q))))) *
               ZAcbc(0.5773502691896258 * (sqrt(2. * (cosp1q - 2. * cosp2q) * p * q + 5. * powr<2>(p) + 2. * powr<2>(q)))) *
               ZAcbc(0.5773502691896258 * (sqrt(4. * cosp1q * p * q - 2. * cosp2q * p * q + 5. * powr<2>(p) + 2. * powr<2>(q))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc, const T4 &ZA4, const T5 &dtZc, const T6 &Zc, const T7 &dtZA,
                                                           const T8 &ZA, const T9 m2A)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};