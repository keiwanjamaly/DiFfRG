template <typename REG> class V_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5>
  static __forceinline__ __host__ __device__ auto kernel(const double q, const double k, const T1 N, const T2 T, const T3 rhoPhi, const T4 m2Pi, const T5 m2Sigma)
  {
    // optimization definitions
    const double DiFfRGREPL1 = RB(powr<2>(k), powr<2>(q));

    // flow
    return 0.25 *
           (CothFiniteT((sqrt(DiFfRGREPL1 + m2Sigma + powr<2>(q))), T) * (sqrt(DiFfRGREPL1 + m2Pi + powr<2>(q))) +
            (-1. + N) * CothFiniteT((sqrt(DiFfRGREPL1 + m2Pi + powr<2>(q))), T) * (sqrt(DiFfRGREPL1 + m2Sigma + powr<2>(q)))) *
           powr<-1>(sqrt((DiFfRGREPL1 + m2Pi + powr<2>(q)) * (DiFfRGREPL1 + m2Sigma + powr<2>(q)))) * RBdot(powr<2>(k), powr<2>(q));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 N, const T2 T, const T3 rhoPhi, const T4 m2Pi, const T5 m2Sigma)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};