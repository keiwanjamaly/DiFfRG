template <typename REG> class d1hPhi0_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12,
            typename T13, typename T14, typename T15, typename T16, typename T17>
  static __forceinline__ __host__ __device__ auto kernel(const double q, const double cos1, const double k, const T1 p0f, const T2 p, const T3 T, const T4 muq, const T5 A0,
                                                         const T6 gAqbq1, const T7 etaQ, const T8 etaPhi, const T9 etaQ0, const T10 etaPhi0, const T11 hPhi, const T12 d1hPhi,
                                                         const T13 d2V, const T14 d3V, const T15 rhoPhi, const T16 m2Pion, const T17 m2Sigma)
  {
    const auto DiFfRGREPL1022 = RB(powr<2>(k), sps(p, p) - 2. * sps(p, q) + sps(q, q));
    const auto DiFfRGREPL1023 = RF(powr<2>(k), sps(q, q));
    const auto DiFfRGREPL1024 = RFdot(powr<2>(k), sps(q, q));

    return -1. * ALoop * m2Pion + 0.1875 * (6560. * $Failed -
                                            32. * (-1. * DiFfRGREPL1024 + DiFfRGREPL1023 * etaQ) * powr<5>(hPhi) *
                                                powr<-1>(DiFfRGREPL1022 + m2Pion - 2. * p0 * q0 + powr<2>(p0) + powr<2>(q0) + sps(p, p) - 2. * sps(p, q) + sps(q, q)) *
                                                powr<-3>(complex<double>(0., 4.) * muq * q0 + 2. * powr<2>(DiFfRGREPL1023) + rhoPhi * powr<2>(hPhi) - 2. * powr<2>(muq) +
                                                         2. * powr<2>(q0) + 4. * DiFfRGREPL1023 * (sqrt(sps(q, q))) + 2. * sps(q, q)) *
                                                (DiFfRGREPL1023 + (sqrt(sps(q, q)))) -
                                            256. * (-1. * DiFfRGREPL1024 + DiFfRGREPL1023 * etaQ) * powr<5>(hPhi) *
                                                powr<-1>(DiFfRGREPL1022 + m2Pion - 2. * p0 * q0 + powr<2>(p0) + powr<2>(q0) + sps(p, p) - 2. * sps(p, q) + sps(q, q)) *
                                                powr<-3>(complex<double>(0., 4.) * A0 * gAqbq1 * muq + 4. * A0 * gAqbq1 * q0 + complex<double>(0., 8.) * muq * q0 +
                                                         4. * powr<2>(DiFfRGREPL1023) + powr<2>(A0) * powr<2>(gAqbq1) + 2. * rhoPhi * powr<2>(hPhi) - 4. * powr<2>(muq) +
                                                         4. * powr<2>(q0) + 8. * DiFfRGREPL1023 * (sqrt(sps(q, q))) + 4. * sps(q, q)) *
                                                (DiFfRGREPL1023 + (sqrt(sps(q, q)))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12,
            typename T13, typename T14, typename T15, typename T16, typename T17>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 p0f, const T2 p, const T3 T, const T4 muq, const T5 A0, const T6 gAqbq1, const T7 etaQ,
                                                           const T8 etaPhi, const T9 etaQ0, const T10 etaPhi0, const T11 hPhi, const T12 d1hPhi, const T13 d2V, const T14 d3V,
                                                           const T15 rhoPhi, const T16 m2Pion, const T17 m2Sigma)
  {
    return d1hPhi * (etaPhi0 + etaQ0);
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }
};